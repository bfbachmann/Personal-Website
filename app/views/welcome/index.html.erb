<script type="text/javascript">

//Stop Turbolinks from firing on this page
$('body').attr("data-turbolinks", "false");

// Declare top level variables
var camera, scene, renderer, container, controls, spotLight, model;
var proceed = true;
var rocks = [];
var numRocks = 20;
var clock = new THREE.Clock();
var tick = 0;

$(init)


// Initialize THREE.js objects
function init() {
    
    // Create element to hold the window
    container = document.createElement( 'div' );
    container.style = "position: absolute; top: 0px; z-index: -1;";
    document.body.appendChild( container );
    
    // Initialize the camera, scene, and renderer
    camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 10000 );
    camera.position.z = 4;
    
    scene = new THREE.Scene();
    
    renderer = new THREE.WebGLRenderer();
    renderer.setSize( window.innerWidth, window.innerHeight);
    renderer.setClearColor( 0xf0f0f0 );
    renderer.gammaOutput = true;
    container.appendChild( renderer.domElement );
    
    // Setup camera controls 
    controls = new THREE.TrackballControls(camera, container);
    controls.addEventListener('change', render);

    var light = new THREE.AmbientLight( 0xf0f0f0, 2); // soft white light
	scene.add( light );

	spotLight = new THREE.DirectionalLight( 0xffffff );
	spotLight.position.set( 100, 1000, 100 );

	spotLight.castShadow = true;

	spotLight.shadow.mapSize.width = 256;
	spotLight.shadow.mapSize.height = 256;

	spotLight.shadow.camera.near = 500;
	spotLight.shadow.camera.far = 4000;
	spotLight.shadow.camera.fov = 30;

	scene.add( spotLight );
    
    initModel();
    initRocks();

    animate();
}



// Render the scene
function render() {
    renderer.render(scene, camera);
}


// Amimate the scene
function animate() {
    render();
    if (proceed) requestAnimationFrame(animate);
    controls.update();
	rotateModel();
    animateRockModels(); 
}


// Loads 3D character model into scene form JSON file
function initModel() {
    var loader = new THREE.JSONLoader();
    loader.load("/assets/small world.json",  addModel);
}

function addModel(geometry, materials) {

	makeMaterialsDoubleSided(materials);

	var material = new THREE.MultiMaterial( materials );
	model = new THREE.Mesh (geometry, material);
	scene.add(model);
}


function initRocks() {
    var loader = new THREE.JSONLoader();
    loader.load("/assets/orbital rock.json", addRockModels);
}


function addRockModels(geometry, material) {

    for (var i = 0; i < numRocks; i++) {
        var rockMaterial = new THREE.MultiMaterial( material );
        var model = new THREE.Mesh (geometry, rockMaterial);
        var modelScale = Math.random() / 2 + 0.1;

        model.position.set(Math.random() * 4 + 1, Math.random() * 4 + 1, Math.random() * 4 + 1);
        model.radius = model.position.length();
        model.scale.set(modelScale, modelScale, modelScale);

        scene.add(model); 
        rocks.push(model);
    }
}


// Make all materials in the mesh double sided so we can see
// them from all angles
function makeMaterialsDoubleSided(materials) {
	$(materials).each( function (index, material) {
		material.side = THREE.DoubleSide;
	} );
}

function rotateModel() {
	model.rotation.x += 0.001;
	model.rotation.y += 0.003;
}

function animateRockModels() {
    // Get the amount of time that has passed
    var delta_t = clock.getDelta();
    tick += delta_t;
    
    // Check for wraparound (we want tick to stay positive)
    if (tick < 0) {
        tick = 0;
    } 

    for (var i = 0; i < numRocks; i++) {
        var rock = rocks[i];
        var x = i+1;

        rock.position.x = rock.radius * Math.sin(tick * x / (numRocks*1.5) - i);
        rock.position.y = rock.radius * Math.sin(tick * x / (numRocks*1.5) - 1.2 * i);
        rock.position.z = rock.radius * Math.cos(tick * x / (numRocks*1.5) - i);

        rock.rotateX(i / (Math.pow(numRocks, 2)));
        rock.rotateY(i / (Math.pow(numRocks, 3)));
        rock.rotateY(i / (Math.pow(numRocks, 2)));
    }

}

</script>
